package codeGeneration

import com.squareup.kotlinpoet.*
import indigo.Card
import indigo.Deck
import indigo.Rank
import indigo.Suit

object CardsGenerator {
    @JvmStatic
    fun main(args: Array<String>) = generateCardsSource()

    private fun generateCardsSource() {
        val properties = Deck
            .allCards
            .asSequence()
            .map { declareProperty(it) }
            .asIterable()

        val type = TypeSpec
            .objectBuilder(name = "Cards")
            .addProperties(properties)
            .build()

        val file = FileSpec
            .builder(packageName = "indigo.generated", fileName = "Cards.generated.kt")
            .addFileComment("Code generated by %S", "${this::class.simpleName}.kt")
            .addAnnotation(
                AnnotationSpec
                    .builder(Suppress::class)
                    .addMember("%S", "RedundantVisibilityModifier")
                    .addMember("%S", "unused")
                    .build()
            )
            .addImport(packageName = "indigo", Suit::class.simpleName!!, Rank::class.simpleName!!)
            .addType(type)
            .build()

        file.writeTo(System.out)
    }

    private fun declareProperty(card: Card) =
        PropertySpec
            .builder(name = "${card.rank.toString().lowercase()}Of${card.suit}", Card::class)
            .initializer(
                CodeBlock.of(
                    "${Card::class.simpleName}(${Suit::class.simpleName}.${card.suit}, ${Rank::class.simpleName}.${card.rank})"
                )
            )
            .build()

}
