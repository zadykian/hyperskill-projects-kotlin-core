// Code generated by "CardsGenerator.kt"
@file:Suppress(
    "RedundantVisibilityModifier",
    "unused",
)

package indigo.generated

import indigo.Card
import indigo.Rank
import indigo.Suit

public object Cards {
    public val aceOfClubs: Card = Card(Suit.Clubs, Rank.Ace)

    public val twoOfClubs: Card = Card(Suit.Clubs, Rank.Two)

    public val threeOfClubs: Card = Card(Suit.Clubs, Rank.Three)

    public val fourOfClubs: Card = Card(Suit.Clubs, Rank.Four)

    public val fiveOfClubs: Card = Card(Suit.Clubs, Rank.Five)

    public val sixOfClubs: Card = Card(Suit.Clubs, Rank.Six)

    public val sevenOfClubs: Card = Card(Suit.Clubs, Rank.Seven)

    public val eightOfClubs: Card = Card(Suit.Clubs, Rank.Eight)

    public val nineOfClubs: Card = Card(Suit.Clubs, Rank.Nine)

    public val tenOfClubs: Card = Card(Suit.Clubs, Rank.Ten)

    public val jackOfClubs: Card = Card(Suit.Clubs, Rank.Jack)

    public val queenOfClubs: Card = Card(Suit.Clubs, Rank.Queen)

    public val kingOfClubs: Card = Card(Suit.Clubs, Rank.King)

    public val aceOfDiamonds: Card = Card(Suit.Diamonds, Rank.Ace)

    public val twoOfDiamonds: Card = Card(Suit.Diamonds, Rank.Two)

    public val threeOfDiamonds: Card = Card(Suit.Diamonds, Rank.Three)

    public val fourOfDiamonds: Card = Card(Suit.Diamonds, Rank.Four)

    public val fiveOfDiamonds: Card = Card(Suit.Diamonds, Rank.Five)

    public val sixOfDiamonds: Card = Card(Suit.Diamonds, Rank.Six)

    public val sevenOfDiamonds: Card = Card(Suit.Diamonds, Rank.Seven)

    public val eightOfDiamonds: Card = Card(Suit.Diamonds, Rank.Eight)

    public val nineOfDiamonds: Card = Card(Suit.Diamonds, Rank.Nine)

    public val tenOfDiamonds: Card = Card(Suit.Diamonds, Rank.Ten)

    public val jackOfDiamonds: Card = Card(Suit.Diamonds, Rank.Jack)

    public val queenOfDiamonds: Card = Card(Suit.Diamonds, Rank.Queen)

    public val kingOfDiamonds: Card = Card(Suit.Diamonds, Rank.King)

    public val aceOfHearts: Card = Card(Suit.Hearts, Rank.Ace)

    public val twoOfHearts: Card = Card(Suit.Hearts, Rank.Two)

    public val threeOfHearts: Card = Card(Suit.Hearts, Rank.Three)

    public val fourOfHearts: Card = Card(Suit.Hearts, Rank.Four)

    public val fiveOfHearts: Card = Card(Suit.Hearts, Rank.Five)

    public val sixOfHearts: Card = Card(Suit.Hearts, Rank.Six)

    public val sevenOfHearts: Card = Card(Suit.Hearts, Rank.Seven)

    public val eightOfHearts: Card = Card(Suit.Hearts, Rank.Eight)

    public val nineOfHearts: Card = Card(Suit.Hearts, Rank.Nine)

    public val tenOfHearts: Card = Card(Suit.Hearts, Rank.Ten)

    public val jackOfHearts: Card = Card(Suit.Hearts, Rank.Jack)

    public val queenOfHearts: Card = Card(Suit.Hearts, Rank.Queen)

    public val kingOfHearts: Card = Card(Suit.Hearts, Rank.King)

    public val aceOfSpades: Card = Card(Suit.Spades, Rank.Ace)

    public val twoOfSpades: Card = Card(Suit.Spades, Rank.Two)

    public val threeOfSpades: Card = Card(Suit.Spades, Rank.Three)

    public val fourOfSpades: Card = Card(Suit.Spades, Rank.Four)

    public val fiveOfSpades: Card = Card(Suit.Spades, Rank.Five)

    public val sixOfSpades: Card = Card(Suit.Spades, Rank.Six)

    public val sevenOfSpades: Card = Card(Suit.Spades, Rank.Seven)

    public val eightOfSpades: Card = Card(Suit.Spades, Rank.Eight)

    public val nineOfSpades: Card = Card(Suit.Spades, Rank.Nine)

    public val tenOfSpades: Card = Card(Suit.Spades, Rank.Ten)

    public val jackOfSpades: Card = Card(Suit.Spades, Rank.Jack)

    public val queenOfSpades: Card = Card(Suit.Spades, Rank.Queen)

    public val kingOfSpades: Card = Card(Suit.Spades, Rank.King)
}
